module.exports = function(grunt){
  grunt.initConfig({
    concat: {
      options: {
        separator: ';'
      },
      dist: {
        src: ['*.js'],
        dest: 'backbone_d3.js'
      }
    }
  })

  grunt.loadNpmTasks('grunt-contrib-concat');

  grunt.registerTask('default', ['concat'])
}
;// Generated by CoffeeScript 1.6.3
(function() {
  var D3Collection, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  D3Collection = (function(_super) {
    __extends(D3Collection, _super);

    function D3Collection() {
      _ref = D3Collection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return D3Collection;

  })(Backbone.Collection);

}).call(this);
;// Generated by CoffeeScript 1.6.3
(function() {
  var D3Model, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  D3Model = (function(_super) {
    __extends(D3Model, _super);

    function D3Model() {
      _ref = D3Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return D3Model;

  })(Backbone.Model);

}).call(this);
;// Generated by CoffeeScript 1.6.3
(function() {
  var D3View, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  D3View = (function(_super) {
    __extends(D3View, _super);

    function D3View() {
      _ref = D3View.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return D3View;

  })(Backbone.View);

}).call(this);
